package com.group.financialcomputing;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import org.jfree.ui.RefineryUtilities;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author yongzhaohuang
 */

public class StockManagementWindow extends javax.swing.JFrame implements ListSelectionListener, ActionListener {
	// Variables declaration - do not modify
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	private javax.swing.JButton jButton4;
	private javax.swing.JButton jButton5;
	private javax.swing.JButton jButton6;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private java.awt.List list1;
	private java.awt.ScrollPane scrollPane1;
	private java.awt.ScrollPane scrollPane2;
	private Map<String, List<OneDayStock>> stocks;
	private Map<String, List<OneDayStock>> pickedStocks = new HashMap<>();
	private JList stocksJlist = new JList();
	private JList pickedStocksJlist = new JList();
	private String choosenStocksString;
	private String choosenPickedStocksString;
	private DefaultListModel stocksListMode = new DefaultListModel();
	private DefaultListModel pickedStocksListMode = new DefaultListModel();

	public String getPyPath() {
		return pyPath;
	}

	public void setPyPath(String pyPath) {
		this.pyPath = pyPath;
	}

	private String pyPath ;
	private String absPath;
	// End of variables declaration

	public Map<String, List<OneDayStock>> getPickedStocks() {
		return pickedStocks;
	}

	public void setPickedStocks(Map<String, List<OneDayStock>> pickedStocks) {
		this.pickedStocks = pickedStocks;
	}

	/**
	 * Creates new form StockPicker
	 */
	public StockManagementWindow() throws IOException {
		initComponents();
	}

	public StockManagementWindow(MainWindow mainWindow) throws IOException {
		this.stocks = mainWindow.getAllStock();
		this.stocksListMode.addAll(stocks.keySet());
		this.pyPath = mainWindow.getPyPath();
		this.absPath = mainWindow.getAbsPath();
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() throws IOException {

		list1 = new java.awt.List();
		jLabel1 = new javax.swing.JLabel();
		scrollPane1 = new java.awt.ScrollPane();
		scrollPane2 = new java.awt.ScrollPane();
		jLabel2 = new javax.swing.JLabel();
		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();
		jButton3 = new javax.swing.JButton();
		jButton4 = new javax.swing.JButton();
		jButton5 = new javax.swing.JButton();
		jButton6 = new javax.swing.JButton();

		stocksJlist.setModel(stocksListMode);
		stocksJlist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		scrollPane1.add(stocksJlist);
		stocksJlist.addListSelectionListener(this);

		pickedStocksJlist.setModel(pickedStocksListMode);
		pickedStocksJlist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		scrollPane2.add(pickedStocksJlist);
		pickedStocksJlist.addListSelectionListener(this);


		jLabel1.setText("Stocks");

		jLabel2.setText("Picked Stocks");

		jButton1.setText("+");
		jButton1.addActionListener(this);

		jButton2.setText("-");
		jButton2.addActionListener(this);

		jButton3.setText("Visualize");
		jButton3.addActionListener(this);

		jButton4.setText("Estimate");
		jButton4.addActionListener(this);

		jButton5.setText("Optimization");
		jButton5.addActionListener(this);

		jButton6.setText("Cancel");
		jButton6.addActionListener(this);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addGap(56, 56, 56)
												.addComponent(jLabel1))
										.addGroup(layout.createSequentialGroup()
												.addGap(31, 31, 31)
												.addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addGap(23, 23, 23)
												.addComponent(jLabel2)
												.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
										.addGroup(layout.createSequentialGroup()
												.addGap(18, 18, 18)
												.addComponent(scrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
																.addGap(0, 52, Short.MAX_VALUE)
																.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																		.addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																		.addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																		.addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																		.addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
														.addGroup(layout.createSequentialGroup()
																.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																		.addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
																.addGap(0, 0, Short.MAX_VALUE)))
												.addContainerGap())))
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addGap(37, 37, 37)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
										.addComponent(jLabel1))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addComponent(scrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
												.addComponent(scrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
										.addGroup(layout.createSequentialGroup()
												.addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(39, 39, 39)
												.addComponent(jButton3)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(jButton4)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(jButton5)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(jButton6)))
								.addContainerGap(22, Short.MAX_VALUE))
		);

		pack();
	}// </editor-fold>


	@Override
	public void valueChanged(ListSelectionEvent listSelectionEvent) {
		choosenStocksString = (String) this.stocksJlist.getSelectedValue();
		choosenPickedStocksString = (String) this.pickedStocksJlist.getSelectedValue();

	}

	@Override
	public void actionPerformed(ActionEvent actionEvent) {
		if (actionEvent.getActionCommand().equals("+")) {
			pickedStocksListMode.addElement(choosenStocksString);
			pickedStocks.put(choosenStocksString, stocks.get(choosenStocksString));

			stocksListMode.removeElement(choosenStocksString);
			stocks.remove(choosenStocksString);
		} else if (actionEvent.getActionCommand().equals("-")) {
			stocksListMode.addElement(choosenPickedStocksString);
			stocks.put(choosenPickedStocksString, stocks.get(choosenPickedStocksString));

			pickedStocksListMode.removeElement(choosenPickedStocksString);
			pickedStocks.remove(choosenPickedStocksString);
		} else if (actionEvent.getActionCommand().equals("Visualize")) {
			showstockWindow fjc = new showstockWindow(this,"折线图");
			fjc.pack();
			RefineryUtilities.centerFrameOnScreen(fjc);
			fjc.setVisible(false);
		} else if (actionEvent.getActionCommand().equals(jButton4.getText())) {
			EstimationWindow estimationWindow = new EstimationWindow(choosenPickedStocksString,this.pyPath,this.absPath);
			estimationWindow.setVisible(true);
		} else if (actionEvent.getActionCommand().equals(jButton5.getText())) {
			int numberOfStock = pickedStocks.size();
			int numberOfDay = 253;
			File file = new File("stockCloseData.txt");
			FileWriter out = null;
			try {
				out = new FileWriter(file);
			} catch (IOException e) {
				e.printStackTrace();
			}


			String[][] stockCloseData = new String[numberOfStock][numberOfDay];
			int count = 0;
			for(String key: pickedStocks.keySet()) {
				stockCloseData[count][0] = key;
				for(int i = 1; i < numberOfDay; i++) {
					stockCloseData[count][i] = String.valueOf(pickedStocks.get(key).get(i-1).getClose());
				}
				count++;
			}

			for (int i = 0; i < numberOfDay; i++) {
				for (int j = 0; j < numberOfStock; j++) {
					try {
						out.write(stockCloseData[j][i]);
						if (j != numberOfStock - 1) {
							out.write(",");
						}
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				try {
					out.write("\n");
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

			try {
				out.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

			OptimizationWindow optimizationWindow = new OptimizationWindow(this);
			optimizationWindow.setVisible(true);
		} else if (actionEvent.getActionCommand().equals("Cancel")) {
			this.dispose();
		}
	}
}

