package com.group.financialcomputing;/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;

/**
 *
 * @author yongzhaohuang
 */
public class MainWindow extends JFrame implements ActionListener {

	/**
	 * Creates new form MainFrame
	 */
	public MainWindow() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		//test
		this.pyPath = "/Users/yongzhaohuang/Documents/python_project";


		this.setTitle("FinancialComputing");
		jMenuBar1 = new JMenuBar();
		jMenu1 = new JMenu();
		jMenu2 = new JMenu();
		jMenu3 = new JMenu();
		jMenu4 = new JMenu();
		jMenu5 = new JMenu();
		jMenu6 = new JMenu();
		jMenu7 = new JMenu();

		JMenuItem stockPick = new JMenuItem("Stock Pick");
		stockPick.addActionListener(this);

		JMenuItem optimization = new JMenuItem("Optimization");
		optimization.addActionListener(this);

		JMenuItem load = new JMenuItem("Load");
		load.addActionListener(this);

		JMenuItem manage = new JMenuItem("Manage");
		manage.addActionListener(this);

		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

		jMenu1.setText("File");
		jMenuBar1.add(jMenu1);


		jMenu2.setText("Edit");
		jMenuBar1.add(jMenu2);

		jMenu3.setText("View");
		jMenuBar1.add(jMenu3);

		jMenu4.setText("Stock");
		jMenuBar1.add(jMenu4);
		jMenu4.add(load);
		jMenu4.add(manage);


		jMenu5.setText("Protfolio");
		jMenuBar1.add(jMenu5);
		jMenu5.add(stockPick);
		jMenu5.add(optimization);

		jMenu6.setText("Window");
		jMenuBar1.add(jMenu6);

		jMenu7.setText("Help");
		jMenuBar1.add(jMenu7);

		setJMenuBar(jMenuBar1);

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(GroupLayout.Alignment.LEADING)
						.addGap(0, 413, Short.MAX_VALUE)
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(GroupLayout.Alignment.LEADING)
						.addGap(0, 279, Short.MAX_VALUE)
		);

		pack();
	}// </editor-fold>

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				MainWindow mainWindow = new MainWindow();
				mainWindow.setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	private JMenu jMenu1;
	private JMenu jMenu2;
	private JMenu jMenu3;
	private JMenu jMenu4;
	private JMenu jMenu5;
	private JMenu jMenu6;
	private JMenu jMenu7;
	private JMenuBar jMenuBar1;
	private HashMap<String, List<OneDayStock>> allStock = new HashMap<>();
	private String pyPath = new String();
	private String absPath = new String();

	public String getPyPath() {
		return pyPath;
	}

	public void setPyPath(String pyPath) {
		this.pyPath = pyPath;
	}


	public String getAbsPath() {
		return absPath;
	}

	public void setAbsPath(String absPath) {
		this.absPath = absPath;
	}



	public HashMap<String, List<OneDayStock>> getAllStock() {
		return allStock;
	}

	public void setAllStock(HashMap<String, List<OneDayStock>> allStock) {
		this.allStock = allStock;
	}

	public void transfer(FileResourceWindow frw) {
		this.allStock = frw.getAllStock();
	}


	@Override
	public void actionPerformed(ActionEvent actionEvent) {
			if (actionEvent.getActionCommand().equals("Load")) {
				FileResourceWindow fr = new FileResourceWindow(this);
				fr.setVisible(true);

			}
			else if (actionEvent.getActionCommand().equals("Optimization")){
				//new txt to store data
				int numberOfStock = allStock.size();
				int numberOfDay = 253;
				File file = new File("stockCloseData.txt");
				FileWriter out = null;
				try {
					out = new FileWriter(file);
				} catch (IOException e) {
					e.printStackTrace();
				}


				String[][] stockCloseData = new String[numberOfStock][numberOfDay];
				int count = 0;
				for(String key: allStock.keySet()) {
					stockCloseData[count][0] = key;
					for(int i = 1; i < numberOfDay; i++) {
						stockCloseData[count][i] = String.valueOf(allStock.get(key).get(i-1).getClose());
					}
					count++;
				}

				for (int i = 0; i < numberOfDay; i++) {
					for (int j = 0; j < numberOfStock; j++) {
						try {
							out.write(stockCloseData[j][i]);
							if (j != numberOfStock - 1) {
								out.write(",");
							}
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					try {
						out.write("\n");
					} catch (IOException e) {
						e.printStackTrace();
					}
				}

				try {
					out.close();
				} catch (IOException e) {
					e.printStackTrace();
				}

				//new txt to store data , for python programme read
				OptimizationWindow optimizationWindow = new OptimizationWindow();
				optimizationWindow.setVisible(true);
			}
			else if (actionEvent.getActionCommand().equals("Stock Pick")) {
				StockPickWindow stockPickWindow = new StockPickWindow(this);
				stockPickWindow.setVisible(true);
			}
			else if (actionEvent.getActionCommand().equals("Manage")){
				System.out.println("this in main window:"+ this.absPath);
				try {
					StockManagementWindow stockManagementWindow = new StockManagementWindow(this);
					stockManagementWindow.setVisible(true);
				} catch (IOException e) {
					e.printStackTrace();
				}
		}

	}
}


